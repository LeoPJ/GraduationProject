import time
import numpy as np
def str2time(a1):
	# 先转换为时间数组
	timeArray = time.strptime(a1, "%Y-%m-%d %H:%M:%S")
	# 转换为时间戳
	timeStamp = int(time.mktime(timeArray))
	return timeStamp

# ~ 暂停次数Number of pauses (NP)
# ~ 暂停持续时间的中值Median duration of pauses (MP)
# ~ 快进的次数Number of forward seeks (NF)
# ~ 快进中跳过的视频内容占比Proportion of skipped video content (SR)
# ~ 快退的次数Number of backward seeks (NB)
# ~ 重复播放的视频长度Replayed video length (RL)
# ~ 加权平均播放速度Average video speed (AS)
# ~ 有效速度变化次数Effective video speed change (SC)
# ~ behavior=(watch_os, watch_rate, start_localtime, end_localtime, start_video_location, end_video_location)

behavior=[('android', 1.0, '2017-10-24 10:04:34', '2017-10-24 10:04:50', 71, 87), ('android', 1.0, '2017-10-24 10:05:04', '2017-10-24 10:05:33', 193, 223), ('android', 1.0, '2017-10-24 10:08:17', '2017-10-24 10:08:22', 212, 217), ('android', 1.0, '2017-10-24 10:08:27', '2017-10-24 10:08:38', 201, 212), ('android', 1.0, '2017-10-24 10:08:38', '2017-10-24 10:08:41', 212, 215), ('android', 1.0, '2017-10-24 10:08:41', '2017-10-24 10:08:46', 215, 219), ('android', 2.0, '2017-10-24 10:08:46', '2017-10-24 10:08:51', 219, 230), ('android', 0.5, '2017-10-24 10:08:59', '2017-10-24 10:09:24', 199, 210), ('android', 0.5, '2017-10-24 10:09:24', '2017-10-24 10:09:44', 201, 210), ('android', 0.5, '2017-10-24 10:09:44', '2017-10-24 10:10:02', 196, 203), ('android', 0.5, '2017-10-24 10:10:46', '2017-10-24 10:10:59', 203, 210), ('android', 0.5, '2017-10-24 10:11:20', '2017-10-24 10:11:29', 206, 209), ('android', 0.5, '2017-10-24 10:13:53', '2017-10-24 10:14:10', 202, 211), ('android', 0.5, '2017-10-24 10:14:10', '2017-10-24 10:14:15', 208, 210), ('android', 0.5, '2017-10-24 10:14:15', '2017-10-24 10:14:23', 207, 210), ('android', 0.5, '2017-10-24 10:14:44', '2017-10-24 10:14:52', 211, 215), ('android', 0.5, '2017-10-24 10:14:58', '2017-10-24 10:15:14', 203, 210), ('android', 0.5, '2017-10-24 10:15:14', '2017-10-24 10:15:47', 198, 213), ('android', 0.5, '2017-10-24 10:18:55', '2017-10-24 10:19:13', 202, 209), ('android', 1.0, '2017-10-24 10:24:22', '2017-10-24 10:24:37', 198, 211), ('android', 1.0, '2017-10-24 10:25:30', '2017-10-24 10:25:55', 204, 227), ('android', 1.0, '2017-10-24 10:32:29', '2017-10-24 10:32:43', 205, 219), ('android', 1.0, '2017-10-24 10:33:05', '2017-10-24 10:33:11', 220, 226), ('android', 1.0, '2017-10-24 10:37:22', '2017-10-24 10:37:50', 94, 122), ('android', 1.0, '2017-10-24 10:37:56', '2017-10-24 10:38:10', 107, 120), ('android', 1.0, '2017-10-24 10:38:33', '2017-10-24 10:38:35', 220, 222), ('android', 0.5, '2017-10-24 10:39:56', '2017-10-24 10:40:30', 205, 222), ('android', 0.5, '2017-10-24 10:41:27', '2017-10-24 10:41:33', 219, 221), ('android', 0.5, '2017-10-24 10:41:40', '2017-10-24 10:41:47', 218, 221), ('android', 0.5, '2017-10-24 10:42:11', '2017-10-24 10:42:28', 217, 225), ('android', 0.5, '2017-10-24 10:42:36', '2017-10-24 10:42:48', 218, 224), ('android', 0.5, '2017-10-24 10:44:02', '2017-10-24 10:44:09', 217, 219), ('android', 0.5, '2017-10-24 10:44:25', '2017-10-24 10:44:29', 220, 222), ('android', 0.5, '2017-10-24 10:44:39', '2017-10-24 10:44:43', 222, 225), ('android', 0.5, '2017-10-24 10:45:46', '2017-10-24 10:46:00', 219, 225), ('android', 0.5, '2017-10-24 10:46:12', '2017-10-24 10:46:21', 221, 225), ('android', 0.5, '2017-10-24 10:47:02', '2017-10-24 10:47:12', 222, 225), ('android', 0.5, '2017-10-24 10:47:23', '2017-10-24 10:47:32', 223, 226), ('android', 0.5, '2017-10-24 10:47:35', '2017-10-24 10:47:41', 218, 221), ('android', 0.5, '2017-10-24 10:47:41', '2017-10-24 10:47:52', 221, 226), ('android', 0.5, '2017-10-24 10:48:05', '2017-10-24 10:48:11', 227, 229), ('android', 0.5, '2017-10-24 10:48:17', '2017-10-24 10:48:31', 222, 228), ('android', 0.5, '2017-10-24 10:48:32', '2017-10-24 10:48:38', 227, 229), ('android', 0.5, '2017-10-24 10:48:43', '2017-10-24 10:48:49', 225, 227), ('android', 0.5, '2017-10-24 10:48:49', '2017-10-24 10:49:04', 222, 230), ('android', 0.5, '2017-10-24 10:49:04', '2017-10-24 10:49:09', 226, 229), ('android', 0.5, '2017-10-24 10:49:09', '2017-10-24 10:49:28', 221, 229), ('android', 0.5, '2017-10-24 10:49:28', '2017-10-24 10:49:46', 229, 238), ('android', 1.0, '2017-10-24 10:54:31', '2017-10-24 10:55:02', 200, 230), ('android', 1.0, '2017-10-24 10:55:29', '2017-10-24 10:55:31', 232, 234), ('android', 1.0, '2017-10-24 10:55:57', '2017-10-24 10:56:01', 235, 239), ('android', 1.0, '2017-10-24 10:56:01', '2017-10-24 10:56:03', 239, 241), ('android', 1.0, '2017-10-24 10:56:52', '2017-10-24 10:56:54', 132, 135), ('android', 1.0, '2017-10-24 10:56:57', '2017-10-24 10:57:07', 124, 134), ('android', 1.0, '2017-10-24 10:57:11', '2017-10-24 10:57:14', 237, 240)]
#behavior=[('android', 1.0, '2017-10-24 11:19:02', '2017-10-24 11:19:06', 0, 3), ('android', 1.0, '2017-10-24 11:19:07', '2017-10-24 11:19:10', 4, 7), ('android', 1.0, '2017-10-24 11:19:16', '2017-10-24 11:19:19', 212, 215), ('android', 1.0, '2017-10-24 11:19:19', '2017-10-24 11:19:22', 215, 219), ('android', 1.0, '2017-10-24 11:19:24', '2017-10-24 11:19:27', 219, 222), ('android', 1.0, '2017-10-24 11:19:27', '2017-10-24 11:19:31', 222, 226), ('android', 1.0, '2017-10-24 11:19:33', '2017-10-24 11:19:36', 227, 230), ('android', 1.0, '2017-10-24 11:19:36', '2017-10-24 11:19:44', 231, 238)]
for row in behavior:
	print(row)

video_length=358

if_watch=[]
for k in range(0,video_length):
	if_watch.append(False)

NP=0
MP=0
NF=0
SR=0
NB=0
RL=0
AS=(behavior[0][5]-behavior[0][4])*behavior[0][1]
duration=behavior[0][5]-behavior[0][4]
SC=0

for l in range(behavior[0][4],behavior[0][5]):
	if_watch[l]=True

i=0
MP_sta=[]
for i in range(0,len(behavior)-1):
	if behavior[i][1]!=behavior[i+1][1]:#变速
		SC=SC+1
	
	#计算加权倍速
	AS=AS+(behavior[i+1][5]-behavior[i+1][4])*behavior[i+1][1]
	duration=duration+behavior[i+1][5]-behavior[i+1][4]
		
	if behavior[i][5]==behavior[i+1][4]:#暂停
		if str2time(behavior[i+1][2])-str2time(behavior[i][3])!=0:
			NP=NP+1
			MP_sta.append(str2time(behavior[i+1][2])-str2time(behavior[i][3]))
	
	elif behavior[i][5]<behavior[i+1][4]:#快进
		NF=NF+1

	else:#后退
		NB=NB+1

	for l in range(behavior[i+1][4],behavior[i+1][5]):
		if(if_watch[l]):
			RL=RL+1
		else:
			if_watch[l]=True		
			
AS=AS/duration

for m in range(0,len(if_watch)):
	if if_watch[m]:
		start=m
		break
for n in range(len(if_watch)-1,-1,-1):
	if if_watch[n]:
		end=n+1
		break
completion=0
for p in range(start,end):
	if if_watch[p]:
		completion=completion+1
	else:
		SR=SR+1
SR=SR/(end-start)

MP = np.median(MP_sta)

index=[NP,MP,NF,SR,NB,RL,AS,SC,completion]
print(index)
